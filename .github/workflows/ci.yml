name: CI
on:
  push:
    branches:
      - master
      - dev
      - 'release-*'
    tags:
      - '*'
  pull_request:
    branches:
      - master
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Test ${{ matrix.title }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - title: 'Linux - Latest'
            os: ubuntu-latest
            version: '1'
          - title: 'Windows - Latest'
            os: windows-latest
            version: '1'
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v2
      - name: "Instantiate test environment"
        run: julia --project=test devrepl.jl
      - name: "Run tests"
        shell: julia --color=yes --project=test --code-coverage="@" --depwarn="yes" --check-bounds="yes" {0}
        run: |
          include(joinpath(pwd(), "test", "runtests.jl"))
      - uses: julia-actions/julia-processcoverage@v1
      - name: "Summarize coverage"
        run: julia --project=test -L devrepl.jl -e 'show_coverage()'
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ matrix.os }}
          path: test/Manifest.toml
  testoldest:
    name: Test Lower Compat Bounds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: 1.6
      - uses: julia-actions/cache@v2
      - name: "Instantiate test environment"
        shell: julia --project=test {0}
        run: |
          import Pkg
          println("*** Dev-Installing DocumenterCitations")
          Pkg.develop(path=pwd())
          println("*** Pinning minimal dependencies")
          Pkg.pin([
              Pkg.PackageSpec(name="AbstractTrees", version="0.4.0"),
              Pkg.PackageSpec(name="Bibliography", version="0.2.15"),
              Pkg.PackageSpec(name="Documenter", version="1.0.0"),
              Pkg.PackageSpec(name="MarkdownAST", version="0.1.2"),
              Pkg.PackageSpec(name="OrderedCollections", version="1.6.0"),
          ])
          Pkg.precompile()
          Pkg.status()
      - name: "Run tests"
        shell: julia --color=yes --project=test {0}
        run: |
          include(joinpath(pwd(), "test", "runtests.jl"))
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      statuses: write
      pages: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: "Instantiate test environment"
        run: julia --project=test devrepl.jl
      - name: "Build documentation"
        run: julia --project=test docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - uses: actions/upload-artifact@v4
        with:
          name: documenter-citations-docs
          path: docs/build/
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(["src", "docs", "test", "devrepl.jl"], verbose=true)'
      - name: Format Check
        shell: julia {0}
        run: |
          out = Cmd(`git diff -U0`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!\n\n$out"
              exit(1)
          end
      - name: Spell Check
        uses: crate-ci/typos@master
      - name: Version Check
        shell: julia {0}
        run: |
          using Pkg
          VERSION = VersionNumber(Pkg.TOML.parsefile("Project.toml")["version"])
          BRANCH = ENV["GITHUB_REF_NAME"]
          if ENV["GITHUB_EVENT_NAME"] == "pull_request"
              # For pull_request events, return the head (aka., "from") branch,
              # not the base (aka., "to") branch.
              BRANCH = ENV["GITHUB_HEAD_REF"]
          end
          if startswith(BRANCH, "release-")
              if (length(VERSION.prerelease) == length(VERSION.build))
                  println("Version $VERSION on release branch OK")
              else
                  @error "Invalid version $VERSION on release branch"
                  exit(1)
              end
          elseif (ENV["GITHUB_REF_TYPE"] == "branch") && (BRANCH != "master")
              if ("dev" in VERSION.prerelease) || ("dev" in VERSION.build)
                  println("Version $VERSION OK with dev-suffix on $BRANCH")
              else
                  @error "Invalid version $VERSION on branch $BRANCH: must contain dev suffix"
                  exit(1)
              end
          else
              println("Version $VERSION OK on $BRANCH")
          end
          exit(0)
      - name: Changelog Check
        shell: julia {0}
        run: |
          using Pkg
          using Dates
          VERSION = VersionNumber(Pkg.TOML.parsefile("Project.toml")["version"])
          BRANCH = ENV["GITHUB_REF_NAME"]
          CHANGELOG = read("NEWS.md", String)
          TODAY = string(Dates.today())
          if ("dev" in VERSION.prerelease) || ("dev" in VERSION.build)
              if !contains(CHANGELOG, "## [Unreleased][]")
                  @error "NEWS.md for dev-version must contain Unreleased heading"
                  exit(1)
              end
          end
          if startswith(BRANCH, "release-")
              if contains(CHANGELOG, "## [Unreleased][]")
                  @error "NEWS.md for releases must not contain Unreleased heading"
                  exit(1)
              end
              release_header =  "## [Version $VERSION][$VERSION] - $TODAY"
              if !contains(CHANGELOG, release_header)
                  @error "NEWS.md must contain release header $(repr(release_header))"
                  exit(1)
              end
              rx_release_link = Regex(replace("[$VERSION]: https://github.com/JuliaDocs/DocumenterCitations.jl/compare/v(\\d.\\d.\\d)...v$VERSION", "."=>"\\.", "[" => "\\[", "]" => "\\]"))
              release_link = match(rx_release_link, CHANGELOG)
              if isnothing(release_link)
                  @error "NEWS.md must contain a link for the release $VERSION with the pattern $(repr(rx_release_link.pattern)) comparing $VERSION with the previous release"
                  exit(1)
              else
                  previous_version = VersionNumber(release_link.captures[1])
                  if previous_version >= VERSION
                      @error "The release link $(repr(release_link.match)) must compare the range from the previous version, not $(previous_version)"
                      exit(1)
                  end
              end
              unreleased_link = "[Unreleased]: https://github.com/JuliaDocs/DocumenterCitations.jl/compare/v$VERSION...HEAD"
              if !contains(CHANGELOG, unreleased_link)
                  @error "NEWS.md must contain link for future unreleased changes $(repr(unreleased_link)) (but no Unreleased header)"
                  exit(1)
              end
          end
          println("NEWS.md OK")
          exit(0)
